/* empty css             *//* empty css                  */import{m as f}from"./ui-B3K06Owz.js";import{x as h,r as v,y as x,z as b,A as r,P as w,H as _,L as N}from"./core-BfEwNXui.js";class g{value;next;constructor(e){this.value=e}}class q{#e;#t;#s;constructor(){this.clear()}enqueue(e){const t=new g(e);this.#e?(this.#t.next=t,this.#t=t):(this.#e=t,this.#t=t),this.#s++}dequeue(){const e=this.#e;if(e)return this.#e=this.#e.next,this.#s--,e.value}peek(){if(this.#e)return this.#e.value}clear(){this.#e=void 0,this.#t=void 0,this.#s=0}get size(){return this.#s}*[Symbol.iterator](){let e=this.#e;for(;e;)yield e.value,e=e.next}}function P(n){p(n);const e=new q;let t=0;const u=()=>{t<n&&e.size>0&&(e.dequeue()(),t++)},i=()=>{t--,u()},s=async(o,a,l)=>{const d=(async()=>o(...l))();a(d);try{await d}catch{}i()},c=(o,a,l)=>{new Promise(d=>{e.enqueue(d)}).then(s.bind(void 0,o,a,l)),(async()=>(await Promise.resolve(),t<n&&u()))()},m=(o,...a)=>new Promise(l=>{c(o,l,a)});return Object.defineProperties(m,{activeCount:{get:()=>t},pendingCount:{get:()=>e.size},clearQueue:{value(){e.clear()}},concurrency:{get:()=>n,set(o){p(o),n=o,queueMicrotask(()=>{for(;t<n&&e.size>0;)u()})}}}),m}function p(n){if(!((Number.isInteger(n)||n===Number.POSITIVE_INFINITY)&&n>0))throw new TypeError("Expected `concurrency` to be a number from 1 and up")}const T={class:"flex gap-5"},y={class:"border border-[#777777] p-5"},z=["innerHTML"],V=h({__name:"p-limit",setup(n){const e=v(""),t=i=>new Promise(s=>{e.value=`${e.value}<br/>${i}`,setTimeout(()=>{s(i)},2e3)}),u=async()=>{const i=P(1),s=[i(()=>t("foo")),i(()=>t("bar")),i(()=>t("s"))];await Promise.all(s)};return(i,s)=>{const c=f;return b(),x("div",T,[r("div",null,[s[1]||(s[1]=r("p",null,"p-limit 模拟并发请求发送",-1)),s[2]||(s[2]=r("p",null,"三个请求 一个一个执行",-1)),w(c,{type:"primary",onClick:u},{default:_(()=>s[0]||(s[0]=[N("发送")])),_:1})]),r("div",y,[s[3]||(s[3]=r("p",null,"请求结果打印：",-1)),r("div",{innerHTML:e.value},null,8,z)])])}}});export{V as default};
